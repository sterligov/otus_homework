// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/sterligov/otus_homework/hw12_13_14_15_calendar/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EventUseCase is an autogenerated mock type for the EventUseCase type
type EventUseCase struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, e
func (_m *EventUseCase) CreateEvent(ctx context.Context, e model.Event) (int64, error) {
	ret := _m.Called(ctx, e)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) int64); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Event) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *EventUseCase) DeleteEvent(ctx context.Context, id int64) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByID provides a mock function with given fields: ctx, id
func (_m *EventUseCase) GetEventByID(ctx context.Context, id int64) (model.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Event
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Event); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDayEvents provides a mock function with given fields: ctx, uid, date
func (_m *EventUseCase) GetUserDayEvents(ctx context.Context, uid int64, date time.Time) ([]model.Event, error) {
	ret := _m.Called(ctx, uid, date)

	var r0 []model.Event
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []model.Event); ok {
		r0 = rf(ctx, uid, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(ctx, uid, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMonthEvents provides a mock function with given fields: ctx, uid, date
func (_m *EventUseCase) GetUserMonthEvents(ctx context.Context, uid int64, date time.Time) ([]model.Event, error) {
	ret := _m.Called(ctx, uid, date)

	var r0 []model.Event
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []model.Event); ok {
		r0 = rf(ctx, uid, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(ctx, uid, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWeekEvents provides a mock function with given fields: ctx, uid, date
func (_m *EventUseCase) GetUserWeekEvents(ctx context.Context, uid int64, date time.Time) ([]model.Event, error) {
	ret := _m.Called(ctx, uid, date)

	var r0 []model.Event
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []model.Event); ok {
		r0 = rf(ctx, uid, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(ctx, uid, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, id, e
func (_m *EventUseCase) UpdateEvent(ctx context.Context, id int64, e model.Event) (int64, error) {
	ret := _m.Called(ctx, id, e)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.Event) int64); ok {
		r0 = rf(ctx, id, e)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, model.Event) error); ok {
		r1 = rf(ctx, id, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
