// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	storage "github.com/sterligov/otus_homework/hw12_13_14_15_calendar/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// EventRepository is an autogenerated mock type for the EventRepository type
type EventRepository struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *EventRepository) CreateEvent(ctx context.Context, event storage.Event) (storage.EventID, error) {
	ret := _m.Called(ctx, event)

	var r0 storage.EventID
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) storage.EventID); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(storage.EventID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *EventRepository) DeleteEvent(ctx context.Context, id storage.EventID) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotifiedEventsBeforeDate provides a mock function with given fields: ctx, date
func (_m *EventRepository) DeleteNotifiedEventsBeforeDate(ctx context.Context, date time.Time) (int64, error) {
	ret := _m.Called(ctx, date)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) int64); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByID provides a mock function with given fields: ctx, id
func (_m *EventRepository) GetEventByID(ctx context.Context, id storage.EventID) (storage.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID) storage.Event); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByNotificationDatePeriod provides a mock function with given fields: ctx, start, end
func (_m *EventRepository) GetEventsByNotificationDatePeriod(ctx context.Context, start time.Time, end time.Time) ([]storage.Event, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []storage.Event); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEventsByPeriod provides a mock function with given fields: ctx, uid, start, end
func (_m *EventRepository) GetUserEventsByPeriod(ctx context.Context, uid storage.UserID, start time.Time, end time.Time) ([]storage.Event, error) {
	ret := _m.Called(ctx, uid, start, end)

	var r0 []storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, storage.UserID, time.Time, time.Time) []storage.Event); ok {
		r0 = rf(ctx, uid, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.UserID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, uid, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *EventRepository) UpdateEvent(ctx context.Context, event storage.Event) (int64, error) {
	ret := _m.Called(ctx, event)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) int64); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsNotified provides a mock function with given fields: ctx, id, isNotified
func (_m *EventRepository) UpdateIsNotified(ctx context.Context, id storage.EventID, isNotified byte) error {
	ret := _m.Called(ctx, id, isNotified)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.EventID, byte) error); ok {
		r0 = rf(ctx, id, isNotified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
